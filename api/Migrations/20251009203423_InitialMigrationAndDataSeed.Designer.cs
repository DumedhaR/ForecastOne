// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20251009203423_InitialMigrationAndDataSeed")]
    partial class InitialMigrationAndDataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.AuthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "google"
                        },
                        new
                        {
                            Id = 2,
                            Name = "facebook"
                        });
                });

            modelBuilder.Entity("api.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1248991,
                            Country = "LK",
                            Name = "Colombo"
                        },
                        new
                        {
                            Id = 1850147,
                            Country = "JP",
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 2644210,
                            Country = "GB",
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = 2988507,
                            Country = "FR",
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 2147714,
                            Country = "AU",
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 4930956,
                            Country = "US",
                            Name = "Boston"
                        },
                        new
                        {
                            Id = 1796236,
                            Country = "CN",
                            Name = "Shanghai"
                        },
                        new
                        {
                            Id = 3143244,
                            Country = "NO",
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = 5128581,
                            Country = "US",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 2643743,
                            Country = "GB",
                            Name = "London"
                        },
                        new
                        {
                            Id = 2950159,
                            Country = "DE",
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 3169070,
                            Country = "IT",
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 524901,
                            Country = "RU",
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = 1816670,
                            Country = "CN",
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = 5368361,
                            Country = "US",
                            Name = "Los Angeles"
                        },
                        new
                        {
                            Id = 3128760,
                            Country = "ES",
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 1880252,
                            Country = "SG",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 1835848,
                            Country = "KR",
                            Name = "Seoul"
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.UserFavoriteCity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("UserFavoriteCities");
                });

            modelBuilder.Entity("api.Models.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("SubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId", "ProviderId", "SubId")
                        .IsUnique()
                        .HasFilter("[SubId] IS NOT NULL");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("api.Models.UserFavoriteCity", b =>
                {
                    b.HasOne("api.Models.City", "City")
                        .WithMany("FavoriteUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany("FavoriteCities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.UserLogin", b =>
                {
                    b.HasOne("api.Models.AuthProvider", "Provider")
                        .WithMany("UserLogins")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("api.Models.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.AuthProvider", b =>
                {
                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("api.Models.City", b =>
                {
                    b.Navigation("FavoriteUsers");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("FavoriteCities");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
